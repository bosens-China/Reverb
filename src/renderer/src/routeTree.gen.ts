/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FocusRouteImport } from './routes/focus'
import { Route as MainRouteImport } from './routes/_main'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MainStatisticsRouteImport } from './routes/_main/statistics'
import { Route as MainSettingsRouteImport } from './routes/_main/settings'
import { Route as MainCoursesIndexRouteImport } from './routes/_main/courses/index'
import { Route as MainCoursesCourseIdRouteImport } from './routes/_main/courses/$courseId'

const FocusRoute = FocusRouteImport.update({
  id: '/focus',
  path: '/focus',
  getParentRoute: () => rootRouteImport,
} as any)
const MainRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MainStatisticsRoute = MainStatisticsRouteImport.update({
  id: '/statistics',
  path: '/statistics',
  getParentRoute: () => MainRoute,
} as any)
const MainSettingsRoute = MainSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => MainRoute,
} as any)
const MainCoursesIndexRoute = MainCoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => MainRoute,
} as any)
const MainCoursesCourseIdRoute = MainCoursesCourseIdRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => MainRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/focus': typeof FocusRoute
  '/settings': typeof MainSettingsRoute
  '/statistics': typeof MainStatisticsRoute
  '/courses/$courseId': typeof MainCoursesCourseIdRoute
  '/courses': typeof MainCoursesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/focus': typeof FocusRoute
  '/settings': typeof MainSettingsRoute
  '/statistics': typeof MainStatisticsRoute
  '/courses/$courseId': typeof MainCoursesCourseIdRoute
  '/courses': typeof MainCoursesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_main': typeof MainRouteWithChildren
  '/focus': typeof FocusRoute
  '/_main/settings': typeof MainSettingsRoute
  '/_main/statistics': typeof MainStatisticsRoute
  '/_main/courses/$courseId': typeof MainCoursesCourseIdRoute
  '/_main/courses/': typeof MainCoursesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/focus'
    | '/settings'
    | '/statistics'
    | '/courses/$courseId'
    | '/courses'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/focus'
    | '/settings'
    | '/statistics'
    | '/courses/$courseId'
    | '/courses'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/focus'
    | '/_main/settings'
    | '/_main/statistics'
    | '/_main/courses/$courseId'
    | '/_main/courses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRouteWithChildren
  FocusRoute: typeof FocusRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/focus': {
      id: '/focus'
      path: '/focus'
      fullPath: '/focus'
      preLoaderRoute: typeof FocusRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/statistics': {
      id: '/_main/statistics'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof MainStatisticsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/settings': {
      id: '/_main/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof MainSettingsRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/courses/': {
      id: '/_main/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof MainCoursesIndexRouteImport
      parentRoute: typeof MainRoute
    }
    '/_main/courses/$courseId': {
      id: '/_main/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof MainCoursesCourseIdRouteImport
      parentRoute: typeof MainRoute
    }
  }
}

interface MainRouteChildren {
  MainSettingsRoute: typeof MainSettingsRoute
  MainStatisticsRoute: typeof MainStatisticsRoute
  MainCoursesCourseIdRoute: typeof MainCoursesCourseIdRoute
  MainCoursesIndexRoute: typeof MainCoursesIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainSettingsRoute: MainSettingsRoute,
  MainStatisticsRoute: MainStatisticsRoute,
  MainCoursesCourseIdRoute: MainCoursesCourseIdRoute,
  MainCoursesIndexRoute: MainCoursesIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRouteWithChildren,
  FocusRoute: FocusRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
